# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Cicd Pipeline
on:
  push:
    branches: [ "main" ]

jobs:
  compile:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Maven Installation
      run: sudo apt install maven -y
      
    - name: Build with Maven
      run: mvn compile
  security-check:
  
    runs-on: self-hosted
    needs: compile

    steps:
    - uses: actions/checkout@v4
    
    - name: Trivy Fs Scan
      run: trivy fs --format table -o fs-report.json .
      
    - name: GitLeaks Installation
      run: sudo apt install gitleaks -y
    - name: Gitleaks code scan
      run: gitleaks detect source . -r gitleaks-report.json -f json
  
  test:
    runs-on: self-hosted
    needs: security-check
    steps:
     - uses: actions/checkout@v4
     - name: Set up JDK 17
       uses: actions/setup-java@v4
       with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
     - name: Unit Test Case
       run: mvn test

  build_project_and_sonar_scan:
    runs-on: self-hosted
    needs: test
    steps:
     - uses: actions/checkout@v4
     - name: Set up JDK 17
       uses: actions/setup-java@v4
       with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
     - name: Build Project
       run: mvn package
     - name: Upload Jar Artifact
       uses: actions/upload-artifact@v4
       with:
         name: App-Jar
         path: target/*.jar 

     - uses: actions/checkout@v4
       with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
     - name: SonarQube Scan
       uses: SonarSource/sonarqube-scan-action@v5.1.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
       env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
    # Check the Quality Gate status.
     - name: SonarQube Quality Gate check
       id: sonarqube-quality-gate-check
       uses: sonarsource/sonarqube-quality-gate-action@master
       with:
        pollingTimeoutSec: 600
       env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
  build_docker_image_and_push:
    runs-on: self-hosted
    needs:  build_project_and_sonar_scan
    steps:
    - uses: actions/setup-java@v4
    - name: Download Jar Artifact
    
      uses: actions/download-artifact@4
      with:
        name: app-jar
        path: app # this will download JAR to ./app folder

    - name: Checkout
      uses: actions/checkout@v4
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: kamraann01/bankingapp:latest

  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: build_docker_image_and_push
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: kubectl apply -f ds.yaml
        kubectl apply -f ds.yml


    
